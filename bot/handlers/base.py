from aiogram import Router, F
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter, JOIN_TRANSITION, or_f
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatAction, ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.utils import markdown as md

import bot.database as db
import bot.keyboards as kb
from bot.fsm import ConfirmationState, LongMemState
from ai.completions import Chat
from ai.utils import parse_system_info

import re
from datetime import datetime, timedelta
from io import BytesIO
import fitz
import whisper
from pydub import AudioSegment
import asyncio
import ffmpeg
import numpy as np

model = whisper.load_model("base")
base_router = Router(name='main')
chat = Chat()


@base_router.message(CommandStart())
async def start_command(message: Message):
    start_args = message.text.split()
    uid = message.from_user.id
    if len(start_args) == 2:
        ref_id = int(start_args[-1])
        ref_user = await db.get_user(ref_id)
        user = await db.get_user(uid)
        if user is None and ref_user.get('ref_count', 0) < 6:
            await db.save_message(uid, 'system', '—ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è –∏ –æ–±—ä—è—Å–Ω–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ!')
            await message.bot.send_message(ref_id, '*ü•≥ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–ª–∏!*\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å.',
                                           message_effect_id="5046509860389126442")
            await db.set_status(ref_id, premium=True, period=timedelta(days=1))
            await db.inc_ref_count(ref_id)

    if message.chat.type == 'private':
        await message.answer(
            text='*–Ø - –ö–ª–∞—É–¥–∏–æ –ù–∞—Ä–∞–Ω—Ö–æ, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ç–∏–ø–æ–ª–æ–≥–∏—è–º–∏.* '
                '–Ø –º–æ–≥—É:\n1. –¢–∏–ø–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ (–∫—Ä–æ–º–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —ç—Ç–∏–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è [–¥—Ä—É–≥–æ–π –±–æ—Ç](https://t.me/fictionalAIbot)\n'
                '2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–æ—Ü–∏–æ–Ω–∏–∫–µ, —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–µ, –ø—Å–∏—Ö–æ—Å–æ—Ñ–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –Æ–Ω–≥–µ\n'
                '3. –°—Ä–∞–≤–Ω–∏—Ç—å 2 –∏ –±–æ–ª–µ–µ —Ç–∏–ø–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π (–∫–∞–∫ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º, —Ç–∞–∫ –∏ –≤ –æ–±—â–µ–º)\n'
                '4. –ü–æ–º–æ—á—å —Å –∏–∑—É—á–µ–Ω–∏–µ–º —Ç–∏–ø–æ–ª–æ–≥–∏–π\n'
                '5. [–†–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26)\n'
                '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!\n\n'
                'P.S: –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å [–º–∞–Ω—É–∞–ª](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26) –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.',
            reply_markup=kb.main_markup
        )
    

@base_router.message(Command(commands='clear'))
async def clear_history(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.set_state(ConfirmationState.confirm)
        await message.answer('‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞? –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                            reply_markup=kb.confirm_markup)
    else:
        await db.clear_group_history(message.chat.id)
        await message.reply('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—Ä–∞–Ω—Ö–æ –∑–∞–±—ã–ª –≤—Å—ë –æ–± —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.')


@base_router.message(ConfirmationState.confirm)
async def confirmation_process(message: Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        await db.clear_history(message.from_user.id)
        await message.answer('üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ù–∞—Ä–∞–Ω—Ö–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—Ç.',
                             reply_markup=kb.main_markup)
        await state.clear()
    elif message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥.',
                             reply_markup=kb.main_markup)
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
        

@base_router.message(Command(commands='cancel'))
async def cancel(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        await db.set_busy_state(message.from_user.id, is_busy=False)
        await message.answer('‚úÖ –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å.')


@base_router.message(or_f(Command(commands='profile'), F.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'))
async def profile(message: Message):
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    history_length = len(user.get('history', []))
    is_premium = await db.get_status(user_id)
    tags = ','.join(user.get('tags', "–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã").split(',')[:3]) + '...'
    end_date = user.get('end_date')
    days_left = (end_date - datetime.now()).days if is_premium else 0
    await message.reply(text=f'*ü´µ –≠—Ç–æ –≤—ã, @{message.from_user.username}:*\n'
                        f'‚îÇ üÜî: {md.code(user_id)}\n‚îÇ üìã –ò—Å—Ç–æ—Ä–∏—è: {history_length}/{"160" if is_premium else "80"} —Å–æ–æ–±—â–µ–Ω–∏–π\n'
                        f'‚îÇ üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: {user.get('collection')}\n' + 
                        f'‚îÇ üè∑Ô∏è –¢–µ–≥–∏: _{tags}_\n' +
                        (f'‚îÇ üëë VIP –¥–æ {end_date.strftime('%d.%m.%Y')} ({days_left + 1} –¥.)' if is_premium else ''),
                        reply_markup=kb.premium_markup)


@base_router.message(or_f(Command(commands='settings'), F.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def settings(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        curr_database = await db.get_collection(user_id)
        long_memory = await db.get_long_memory(user_id)
    else:
        user_id = message.chat.id
        curr_database = await db.get_collection(user_id, group=True)
        long_memory = await db.get_long_memory(user_id, group=True)
    markup = kb.settings_buttons(user_id, curr_database)
    msg = await message.answer('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ù–∞—Ä–∞–Ω—Ö–æ:</b>\n' +
                               f'üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - <i>"{curr_database}"</i>\n' +
                               '   <i>–¢—ã–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.</i>\n' +
                               (f'üß† –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å: <i>{long_memory}</i>' if long_memory else 'üß† –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–æ–ª–≥—É—é –ø–∞–º—è—Ç—å'),
                               reply_markup=markup, parse_mode='HTML')
    await state.set_data({'msg': msg, 'caller': message.from_user.id})


@base_router.callback_query(F.data.startswith('collection'))
async def set_database(callback: CallbackQuery, state: FSMContext):
    data = callback.data.split('__')[-1]
    collection, uid = data.split('_')
    state_data = await state.get_data()
    if state_data['caller'] != callback.from_user.id:
        await callback.answer('–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞. –ë—Ä—ã—Å—å.')
        return
    await db.set_collection(int(uid), collection, group=uid.startswith('-100'))
    selection_msg = (await state.get_data())['msg']
    markup = kb.settings_buttons(uid, collection)
    long_memory = await db.get_long_memory(int(uid), group=uid.startswith('-100'))
    await selection_msg.edit_text('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ù–∞—Ä–∞–Ω—Ö–æ:</b>\n' +
                                f'üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - <i>"{collection}"</i>\n' +
                                '   <i>–¢—ã–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.</i>\n' +
                                (f'üß† –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å: <i>{long_memory}</i>' if long_memory else 'üß† –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–æ–ª–≥—É—é –ø–∞–º—è—Ç—å'),
                                reply_markup=markup, parse_mode='HTML')
    

@base_router.callback_query(F.data.startswith('colinfo'))
async def set_database(callback: CallbackQuery):
    collection = callback.data.split('__')[-1]
    data = {
        'dynamic': 'dynamic - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –æ—á–µ–Ω—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –¥–ª—è –¥–æ–ª–≥–æ–π –±–µ—Å–µ–¥—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ë–ó.',
        'ennea': 'ennea - –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º—ã. –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —É—á–µ–Ω–∏—è—Ö –ù–∞—Ä–∞–Ω—Ö–æ.',
        'socionics': 'socionics - –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ü–∏–æ–Ω–∏–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –ê. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å wikisocion.',
        'psychosophy': 'psychosophy - –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—Å–∏—Ö–æ—Å–æ—Ñ–∏–∏. –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ç—Ä—É–¥–∞—Ö –ê—Ñ–∞–Ω–∞—Å—å–µ–≤–∞.'
    }
    await callback.answer(data[collection], show_alert=True)


@base_router.callback_query(F.data.startswith('long_memory'))
async def set_long_memory(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    if state_data['caller'] != callback.from_user.id:
        await callback.answer('–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞. –ë—Ä—ã—Å—å.')
        return
    await state.set_state(LongMemState.enter)
    await state.set_data({'uid': callback.from_user.id, 'msg': callback.message})
    await callback.message.edit_text('üß† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–æ–ª–≥—É—é –ø–∞–º—è—Ç—å.\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–∫—É.')


@base_router.message(LongMemState.enter)
async def write_long_memory(message: Message, state: FSMContext):
    data = await state.get_data()
    collection = await db.get_collection(message.from_user.id)
    markup = kb.settings_buttons(message.from_user.id, collection)
    if data['uid'] != message.from_user.id:
        return
    if message.text != '.':
        if message.chat.type == 'private':
            await db.set_long_memory(message.from_user.id, message.text[:200])
        else:
            await db.set_long_memory(message.chat.id, message.text[:200], True)
    await data['msg'].delete()
    await message.reply('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ù–∞—Ä–∞–Ω—Ö–æ:</b>\n' +
                        f'üìÇ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - <i>"{collection}"</i>\n' +
                        '   <i>–¢—ã–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–ø–∫–∏ –¥–ª—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.</i>\n' +
                        f'üß† –î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å: <i>{message.text}</i>',
                        reply_markup=markup, parse_mode='HTML')
    await message.delete()
    await state.clear()
    await state.set_data(**data)


@base_router.callback_query(F.data.startswith('watch'))
async def watch_menu(callback: CallbackQuery):
    menu = callback.data.split('__')[-1]
    user = await db.get_user(callback.from_user.id)
    ref_count = user.get("ref_count", 5)
    menus = {
        'premium': '*üëë –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–Ω–æ–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n' +
                '1. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ - _–ª–∏–º–∏—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–ª–∏—á–µ–Ω —Å 80 –¥–æ 160_\n' +
                '2. –ß—Ç–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–æ–≤ - _–ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å pdf-—Ñ–∞–π–ª—ã —Å –æ–ø—Ä–æ—Å–Ω–∏–∫–∞–º–∏ –±–µ–∑ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤. ' +
                '–°–∞–º –æ–ø—Ä–æ—Å–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É –µ–≥–æ –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –µ—â–µ –≥–ª—É–±–∂–µ._\n' +
                '3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - _—Ç—É—Ç –æ–±—ä—è—Å–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ..._\n' +
                '4. –§—É–Ω–∫—Ü–∏—è "–≤–Ω–µ –æ—á–µ—Ä–µ–¥–∏" - _–ø–æ–∑–≤–æ–ª—è–µ—Ç "–ø—Ä–æ–π—Ç–∏" —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –±–æ—Ç–∞. –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω._\n' +
                '–ü–æ–º–∏–º–æ –≤—Å–µ–≥–æ –ø—Ä–æ—á–µ–≥–æ, –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–µ–º–∏—É–º —é–∑–µ—Ä–∞–º _—Å—Ä–∞–∑—É_ –ø–æ—Å–ª–µ –∏—Ö –≤—ã—Ö–æ–¥–∞.\n' +
                '–ò–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ: –≤ –±—É–¥—É—â–µ–º –¥–ª—è VIP-—é–∑–µ—Ä–æ–≤ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ [—Å–µ–º–∞–Ω—Ç–∏–∫–µ —Ä–µ—á–∏](https://vk.com/@e.vasilevs-shpargalka-po-semantike-rechi-dlya-opredeleniya-sociotipa)...\n\n' +
                '*üí∏ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: 250‚ÇΩ/–º–µ—Å—è—Ü.* –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ [–±—É—Å—Ç–∏](https://boosty.to/enneai/donate) - [–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –õ–°](https://t.me/m/KCKTEdqAM2Iy)',

        'ref':  '*üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.*\n' +
                f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: `t.me/typologyAIbot?start={callback.from_user.id}` - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –¥—Ä—É–≥—É!\n' +
                '–£—á—Ç–∏—Ç–µ, —á—Ç–æ –ø—Ä–µ–º–∏—É–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∑–∞ _–Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö—Å—è –±–æ—Ç–æ–º.\n' +
                (f'\n*–ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {5 - ref_count}*') if ref_count else '–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.'
    }

    await callback.message.edit_text(menus[menu], reply_markup=kb.premium_markup)


@base_router.message(Command('floodwait'))
async def set_floodwait(message: Message):
    if message.chat.type == 'supergroup':
        member = await message.bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        if member.status not in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR):
            await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
            return
        text = message.text.split()
        if len(text) < 2:
            await message.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. (/floodwait [–≤—Ä–µ–º—è])')
            return
        seconds = text[-1]
        if not seconds.isnumeric():
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∞–Ω–Ω—ã–µ, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.')
            return
        await db.set_floodwait(message.chat.id, int(seconds))
        await message.reply(f'‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –±–æ—Ç–æ–º –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑ –≤ {seconds} —Å–µ–∫—É–Ω–¥.')


@base_router.message(F.text | F.caption | F.document)
async def message_handler(message: Message):
    text = message.caption if message.caption else message.text
    if message.chat.type == 'private':
        user_id = message.from_user.id
        user = await db.get_user(user_id)
        if not user:
            user = await db.save_message(user_id, 'system', '—é–∑–µ—Ä –≤–ø–µ—Ä–≤—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ç–æ–±–æ–π, –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è.')
            print(user)
        is_busy = user.get('busy')
        is_premium = await db.get_status(user_id)
        doc = message.document
        if doc and not is_premium:
            await message.answer('üîí –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π.')
            return
        if doc:
            file_id = message.document.file_id
            file = await message.bot.download(file_id)
            buffer = BytesIO(file.read())
            with fitz.open(stream=buffer.read(), filetype="pdf") as doc:
                text = message.caption + ':\n\n'
                for page in doc:
                    text += page.get_text()

        if is_busy:
            await message.answer('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n–ó–∞–≤–∏—Å –±–æ—Ç? –ò—Å–ø–æ–ª—å–∑—É–π /cancel')
            return
        await db.set_busy_state(user_id, True)
        await db.save_message(user_id, 'user', text, is_premium)
        chat_history = await db.get_history(user_id)

        selected_collection = user.get('collection')
        if selected_collection == 'dynamic':
            collection = await chat.vector_db.classify_search(text)
            status_msg = await message.answer(f'‚úÖ *–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.* –ó–∞–ø—Ä–æ—Å –æ—Ç–Ω–µ—Å—ë–Ω –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π "{collection}"\n_–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π - /settings_')
        else:
            collection = selected_collection
            status_msg = await message.answer(f'*‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.* –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - "{collection}"')
        waiting_msg = await message.answer('‚åõÔ∏è')
        await message.bot.send_chat_action(user_id, ChatAction.TYPING)
        tags = user.get('tags', '')
        long_memory = user.get('long_memory', '')
        response = await chat.create(
            request=text,
            collection=collection,
            chat_history=[{'role': 'system',
                           'content': f'–ü–û–°–¢–û–Ø–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï. –ó–î–ï–°–¨ –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø, –ó–ê–ü–ò–°–ê–ù–ù–ê–Ø –°–ê–ú–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú: {long_memory}'}] + chat_history,
            premium=is_premium,
            tags=tags
        )
        await status_msg.delete()
        await waiting_msg.delete()
        cleared = parse_system_info(response)
        buttons = kb.create_buttons(cleared['buttons'])
        await db.set_tags(user_id, cleared['tags'])

        if len(cleared['text']) >= 4096:
            chunked = [cleared['text'][:4090] + '...', '...' + cleared['text'][4090:]]
            first = await message.reply(chunked[0], parse_mode='Markdown')
            await first.reply(chunked[1], parse_mode='Markdown', reply_markup=buttons)
        else:
            await message.answer(cleared['text'], parse_mode='Markdown', reply_markup=buttons)

        await db.save_message(user_id, 'system', cleared['text'], is_premium)
        await db.set_busy_state(user_id, False)
        
    elif message.chat.type == 'supergroup':
        group_id = message.chat.id
        group = await db.get_group(group_id)
        bot = await message.bot.get_me()
        if not re.search(f'^@{bot.username}', message.text):
            await db.save_group_message(
                group_id=message.chat.id,
                username=f'{message.from_user.username} ({message.from_user.full_name})',
                role='system',
                content=message.text
            )
            return
        floodwait = group.get('floodwait', 10)
        last_request = await db.get_last_request(message.chat.id)
        if last_request:
            now = datetime.now()
            diff = (now - last_request).total_seconds()
            if diff < floodwait:
                await message.reply(f'*‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Å—é –≥—Ä—É–ø–ø—É:*\n–ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(floodwait - diff)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.')
                return
            
        await db.set_last_request(message.chat.id)
        await db.save_group_message(
            group_id=message.chat.id,
            username=f'{message.from_user.username} ({message.from_user.full_name})',
            role='user',
            content=message.text
        )
        group_chat_history = await db.get_group_history(group_id)

        if (reply_to := message.reply_to_message):
            reply_to_text = reply_to.caption if reply_to.caption else reply_to.text
            reply_to_context = {
                'role': 'user',
                'content': f'[–ù–ê –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï –°–°–´–õ–ê–ï–¢–°–Ø –¢–ï–ö–£–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨]\n@{reply_to.from_user.username}:\n{reply_to_text}'
            }
            group_chat_history.insert(-2, reply_to_context)

        waiting_msg = await message.reply('‚è≥')
        await message.bot.send_chat_action(chat_id=message.chat.id,
                                           action=ChatAction.TYPING,
                                           message_thread_id=message.message_thread_id)
        selected_collection = await db.get_collection(group_id, group=True)
        long_memory = group.get('long_memory', '')
        response = await chat.create(
            request=text.split(maxsplit=1)[-1],
            collection=selected_collection,
            chat_history=[{'role': 'system',
                           'content': f'–ü–û–°–¢–û–Ø–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï. –ó–î–ï–°–¨ –ü–û–°–¢–û–Ø–ù–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø, –ó–ê–ü–ò–°–ê–ù–ù–ê–Ø –°–ê–ú–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú: {long_memory}'}] + group_chat_history,
            is_group=True
        )
        cleared = parse_system_info(response)
        await waiting_msg.delete()
        await db.save_group_message(
            group_id=message.chat.id, 
            username='typologyAIbot (you)',
            role='assistant',
            content=cleared['text']
        )
        await message.reply(f'<blockquote expandable>{cleared['text']}</blockquote>', parse_mode='HTML')


@base_router.message(F.voice)
async def speesh_recognize(message: Message):
    if message.chat.type != 'private':
        return
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    is_premium = user.get('premium')
    if not is_premium:
        await message.answer('üîí –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–æ–π.')
        return
    await db.set_busy_state(user_id, True)

    status = await message.answer('*üó£ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å...*')
    voice = message.voice
    file = await message.bot.download(voice.file_id)
    ogg_data = BytesIO(file.read())

    def convert_and_transcribe(ogg_data: BytesIO) -> str:
        ogg_data.seek(0)
        audio = AudioSegment.from_file(ogg_data, format="ogg")
        wav_io = BytesIO()
        audio.export(wav_io, format="wav")
        wav_io.seek(0)

        out, _ = (
            ffmpeg
            .input('pipe:0')
            .output('pipe:1', format='s16le', acodec='pcm_s16le', ac=1, ar='16000')
            .run(input=wav_io.read(), capture_stdout=True, capture_stderr=True)
        )
        audio_data = np.frombuffer(out, np.int16).flatten().astype(np.float32) / 32768.0

        result = model.transcribe(audio_data, language="ru")
        return result["text"]

    result_text = await asyncio.to_thread(convert_and_transcribe, ogg_data)
    sandglasses = await message.answer('‚è≥')
    await db.save_message(user_id, 'user', result_text, is_premium)

    collection = user.get('collection')
    if collection == 'dynamic':
        collection = await chat.vector_db.classify_search(message.text)
        status = await status.edit_text(f'<b>‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫:</b>\n<blockquote>{result_text}</blockquote>\n–ó–∞–ø—Ä–æ—Å –æ—Ç–Ω–µ—Å—ë–Ω –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π "{collection}"\n<i>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π - /settings</i>',
                                      parse_mode='HTML')
    else:
        collection = collection
        status = await status.edit_text(f'<b>‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫:</b>\n<blockquote>{result_text}</blockquote>\n–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π - "{collection}"',
                                      parse_mode='HTML')
    chat_history = await db.get_history(user_id)

    response = await chat.create(result_text, collection, chat_history, False, is_premium)
    cleared = parse_system_info(response)
    buttons = kb.create_buttons(buttons)

    await sandglasses.delete()
    await status.delete()
    if len(cleared['text']) >= 4096:
        chunked = [cleared['text'][:4090] + '...', '...' + cleared['text'][4090:]]
        first = await message.reply(chunked[0], parse_mode='Markdown')
        await first.reply(chunked[1], parse_mode='Markdown', reply_markup=buttons)
    else:
        await message.answer(cleared['text'], parse_mode='Markdown', reply_markup=buttons)
    await db.set_busy_state(user_id, False)


@base_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def on_group_adding(message: Message):
    await message.answer(text='*–Ø - –ù–∞—Ä–∞–Ω—Ö–æ, –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–µ.*\n'
                                '–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å –∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. '
                                '–ù–∞–ø—Ä–∏–º–µ—Ä: "@typologyAIbot —Ç–∏–ø–∏—Ä—É–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞".\n'
                                '–¢–∞–∫–∂–µ —è —Å–ø–æ—Å–æ–±–µ–Ω —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.'
                                '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ [–º–∞–Ω—É–∞–ª–µ](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26)\n\n'
                                '*‚ùóÔ∏è –î–õ–Ø –ö–û–†–†–ï–ö–¢–ù–û–ô –†–ê–ë–û–¢–´ –ë–û–¢–ê –ï–ú–£ –ù–£–ñ–ù–û –í–´–î–ê–¢–¨ –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê*')
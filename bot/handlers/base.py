from aiogram import Router
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter, JOIN_TRANSITION
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums import ChatAction, ChatMemberStatus
from aiogram.fsm.context import FSMContext

import bot.database as db
import bot.keyboards as kb
from bot.fsm import ConfirmationState, ReviewState
from ai.completions import Chat
from ai.utils import parse_buttons

from bot.config import ADMIN_ID
import re
from datetime import datetime, timezone


base_router = Router(name='main')
chat = Chat()


@base_router.message(CommandStart())
async def start_command(message: Message):
    if message.chat.type == 'private':
        await message.answer(
            text='*–Ø - –ö–ª–∞—É–¥–∏–æ –ù–∞—Ä–∞–Ω—Ö–æ, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–æ–π.* '
                '–Ø –º–æ–≥—É:\n1. –¢–∏–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —á—Ç–æ-–ª–∏–±–æ –µ—â—ë\n'
                '2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —ç–Ω–Ω–µ–∞—Ç–∏–ø–∞—Ö –∏ –∏—Ö –ø–æ–¥—Ç–∏–ø–∞—Ö\n'
                '3. –°—Ä–∞–≤–Ω–∏—Ç—å 2 –∏ –±–æ–ª–µ–µ —ç–Ω–Ω–µ–∞—Ç–∏–ø–∞/–ø–æ–¥—Ç–∏–ø–∞ –º–µ–∂–¥—É —Å–æ–±–æ–π\n'
                '4. –ü–æ–º–æ—á—å —Å –∏–∑—É—á–µ–Ω–∏–µ–º —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º—ã\n'
                '5. [–†–∞–±–æ—Ç–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26)\n'
                '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!\n\n'
                'P.S: –ø–æ–∫–∞ —á—Ç–æ —è —Ö–æ—Ä–æ—à —Ç–æ–ª—å–∫–æ –≤ —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–µ. –í–º–µ—Å—Ç–æ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π (—Å–æ7) –ª—É—á—à–µ –ø–∏—à–∏ –ø–æ–ª–Ω—ã–µ (—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ï7) - —Ç–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç —Ç–æ—á–Ω–µ–µ.\n'
                'P.P.S: –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç—å [–º–∞–Ω—É–∞–ª](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26) –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.',
            reply_markup=kb.main_markup
        )
    

@base_router.message(Command(commands='clear'))
async def clear_history(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.set_state(ConfirmationState.confirm)
        await message.answer('‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞? –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                            reply_markup=kb.confirm_markup)
        

@base_router.message(Command(commands='cancel'))
async def cancel(message: Message):
    if message.chat.type == 'private':
        await db.set_busy_state(message.from_user.id, is_busy=False)
        await message.answer('‚úÖ –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å.')


@base_router.message(ConfirmationState.confirm)
async def confirmation_process(message: Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        await db.clear_history(message.from_user.id)
        await message.answer('üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ù–∞—Ä–∞–Ω—Ö–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—Ç.',
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥.',
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')


@base_router.message(Command('floodwait'))
async def set_floodwait(message: Message):
    if message.chat.type == 'supergroup':
        member = await message.bot.get_chat_member(chat_id=message.chat.id, user_id=message.from_user.id)
        if member.status not in (ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR):
            await message.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
            return
        text = message.text.split()
        if len(text) < 2:
            await message.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. (/floodwait [–≤—Ä–µ–º—è])')
            return
        seconds = text[-1]
        if not seconds.isnumeric():
            await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∞–Ω–Ω—ã–µ, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.')
            return
        await db.set_floodwait(message.chat.id, int(seconds))
        await message.reply(f'‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –±–æ—Ç–æ–º –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑ –≤ {seconds} —Å–µ–∫—É–Ω–¥.')
    

@base_router.message(lambda x: bool(x.text) | bool(x.caption))
async def message_handler(message: Message):
    text = message.caption if message.caption else message.text
    user_id = message.from_user.id

    if message.chat.type == 'private':
        is_busy = await db.get_busy_state(user_id)
        if is_busy:
            await message.answer('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n–ó–∞–≤–∏—Å –±–æ—Ç? –ò—Å–ø–æ–ª—å–∑—É–π /cancel')
            return
        await db.set_busy_state(user_id, True)
        await db.save_message(user_id, 'user', text)
        chat_history = await db.get_history(user_id)

        waiting_msg = await message.answer('‚è≥')
        await message.bot.send_chat_action(user_id, ChatAction.TYPING)

        response = await chat.create(
            request=text,
            collections='naranjo',
            chat_history=chat_history
        )
        cleared_text, buttons_data = parse_buttons(response)
        buttons = kb.create_buttons(buttons_data)

        await waiting_msg.delete()
        await db.save_message(user_id, 'system', cleared_text)
        await message.reply(cleared_text, parse_mode='Markdown', reply_markup=buttons)
        await db.set_busy_state(user_id, False)
        
    elif message.chat.type == 'supergroup':
        bot = await message.bot.get_me()
        if not re.search(f'^@{bot.username}', message.text):
            await db.save_group_message(
                group_id=message.chat.id,
                username=message.from_user.username,
                role='system',
                content=message.text
            )
            return
        floodwait = await db.get_floodwait(message.chat.id)
        last_message = await db.get_last_request(message.chat.id)
        if last_message:
            now = datetime.now()
            diff = (now - last_message).total_seconds()
            if diff < floodwait:
                await message.reply(f'*‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—Å—é –≥—Ä—É–ø–ø—É:*\n–ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(floodwait - diff)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.')
                return
            
        await db.set_last_request(message.chat.id)
        await db.save_group_message(
                group_id=message.chat.id,
                username=message.from_user.username,
                role='user',
                content=message.text
            )
        group_chat_history = await db.get_group_history(message.chat.id)

        if (reply_to := message.reply_to_message):
            reply_to_text = reply_to.caption if reply_to.caption else reply_to.text
            reply_to_context = {
                'role': 'user',
                'content': f'@{reply_to.from_user.username}:\n{reply_to_text}'
            }
            group_chat_history.insert(-2, reply_to_context)

        waiting_msg = await message.reply('‚è≥')
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        response = await chat.create(
            request=text.split(maxsplit=1)[-1],
            collections='naranjo',
            chat_history=group_chat_history,
            is_group=True
        )
        cleared_text, _ = parse_buttons(response)
        await waiting_msg.delete()
        await db.save_group_message(
            group_id=message.chat.id, 
            username=message.from_user.username,
            role='assistant',
            content=cleared_text
        )
        await message.reply(cleared_text, parse_mode='Markdown')


@base_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def on_group_adding(message: Message):
    await message.answer(text='*–Ø - –ù–∞—Ä–∞–Ω—Ö–æ, –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–µ.*\n'
                                '–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å –∏ –∑–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. '
                                '–ù–∞–ø—Ä–∏–º–µ—Ä: "@typologyAIbot —Ç–∏–ø–∏—Ä—É–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞".\n'
                                '–¢–∞–∫–∂–µ —è —Å–ø–æ—Å–æ–±–µ–Ω —á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.'
                                '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±–æ –º–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ [–º–∞–Ω—É–∞–ª–µ](https://telegra.ph/Klaudio-Naranho--Vash-pomoshchnik-po-tipologiyam-04-26)\n\n'
                                '*‚ùóÔ∏è –î–õ–Ø –ö–û–†–†–ï–ö–¢–ù–û–ô –†–ê–ë–û–¢–´ –ë–û–¢–ê –ï–ú–£ –ù–£–ñ–ù–û –í–´–î–ê–¢–¨ –ü–†–ê–í–ê –ê–î–ú–ò–ù–ê*')
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.enums import ChatAction
from aiogram.fsm.context import FSMContext

import bot.database as db
import bot.keyboards as kb
from bot.fsm import ConfirmationState, ReviewState
from ai.completions import Chat

from bot.config import ADMIN_ID
import re


base_router = Router(name='main')
chat = Chat()


@base_router.message(CommandStart())
async def start_command(message: Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç, —è - –ö–ª–∞—É–¥–∏–æ –ù–∞—Ä–∞–Ω—Ö–æ, —á–∏–ª–∏–π—Å–∫–∏–π –ø—Å–∏—Ö–∏–∞—Ç—Ä, –¥–æ–∫—Ç–æ—Ä –º–µ–¥–∏—Ü–∏–Ω—ã, –≥–µ—à—Ç–∞–ª—å—Ç-—Ç–µ—Ä–∞–ø–µ–≤—Ç, –∏ —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —ç–Ω–Ω–µ–∞–≥—Ä–∞–º–º–µ –∏ —Ç–≤–æ–µ–º—É —Ç–∏–ø—É.\n\nP.S –ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–±—Ç–∏–ø–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (–≤–º–µ—Å—Ç–æ "—Å–æ7" –ª—É—á—à–µ –ø–∏—Å–∞—Ç—å "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –µ7", –Ω–∞–ø—Ä–∏–º–µ—Ä)'
    )
    await message.answer('–¢–∞–∫–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ [–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª](https://t.me/typologyAIchannel), —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.',
                         parse_mode='markdown')
    

@base_router.message(Command(commands='clear'))
async def clear_history(message: Message, state: FSMContext):
    await state.set_state(ConfirmationState.confirm)
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å—Ç–µ—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞? –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                         reply_markup=kb.confirm_markup)
    

@base_router.message(ConfirmationState.confirm)
async def confirmation_process(message: Message, state: FSMContext):
    if message.text == '–î–∞':
        await db.clear_history(message.from_user.id)
        await message.answer('üóë –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –ù–∞—Ä–∞–Ω—Ö–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–Ω–∏—Ç.',
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text == '–ù–µ—Ç':
        await message.answer('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥.',
                             reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')


@base_router.message(ReviewState.review)
async def send_review(message: Message, state: FSMContext):
    await message.bot.send_message(ADMIN_ID, f'–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:\n{message.text}')
    await message.answer('‚úÖ –û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!')
    await state.clear()
    

@base_router.message(lambda x: bool(x.text) | bool(x.caption))
async def message_handler(message: Message):
    text = message.caption if message.caption else message.text
    user_id = message.from_user.id

    if message.chat.type == 'private':
        is_busy = await db.get_busy_state(user_id)
        if is_busy:
            await message.answer('–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.')
            return
        await db.set_busy_state(user_id, True)
        await db.save_message(user_id, 'user', text)
        chat_history = await db.get_history(user_id)

        waiting_msg = await message.answer('‚è≥')
        await message.bot.send_chat_action(user_id, ChatAction.TYPING)

        response = await chat.create(
            request=text,
            collections='naranjo',
            chat_history=chat_history
        )
        await waiting_msg.delete()
        await db.save_message(user_id, 'system', response)
        await message.reply(response, parse_mode='Markdown')
        await db.set_busy_state(user_id, False)
        
    elif message.chat.type == 'supergroup':
        await db.save_group_message(
            group_id=message.chat.id,
            username=message.from_user.username,
            role='user',
            content=message.text
        )
        group_chat_history = await db.get_group_history(message.chat.id)

        if (reply_to := message.reply_to_message):
            reply_to_text = reply_to.caption if reply_to.caption else reply_to.text
            reply_to_context = {
                'role': 'user',
                'content': f'–ò–°–ü–û–õ–¨–ó–£–ô –≠–¢–û –°–û–û–ë–©–ï–ù–ò–ï –û–¢ {reply_to.from_user.username} –í –ö–û–ù–¢–ï–ö–°–¢–ï:\n{reply_to_text}'
            }
            group_chat_history.insert(-2, reply_to_context)

        bot = await message.bot.get_me()
        if not re.search(f'@{bot.username}', message.text):
            return
        waiting_msg = await message.reply('‚è≥')
        await message.bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        response = await chat.create(
            request=text.split(maxsplit=1)[-1],
            collections='naranjo',
            chat_history=group_chat_history,
            is_group=True
        )
        await waiting_msg.delete()
        await db.save_group_message(message.chat.id, message.from_user.username, 'assistant', response)
        await message.reply(response, parse_mode='Markdown')
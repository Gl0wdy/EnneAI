from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext

import bot.keyboards as kb
import bot.database as db
from bot.config import ADMIN_ID
from bot.fsm import SendingState, PremiumState

from datetime import timedelta
from ai.utils import read_session_data


admin_router = Router(name='router')


@admin_router.message(Command(commands=['admin']))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞.', reply_markup=kb.admin_markup)


@admin_router.message(lambda x: x.text == '–†–∞—Å—Å—ã–ª–∫–∞')
async def sending(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await state.set_state(SendingState.enter_content)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')


@admin_router.message(lambda x: x.text == '–í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º')
async def give_premium(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∏ –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await state.set_state(PremiumState.giving)


@admin_router.message(lambda x: x.text == '–î–æ—Ö–æ–¥')
async def stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    errors = read_session_data()['errors']
    users = await db.get_all_users()
    premium_counter = 0
    async for i in users:
        premium_counter += int(i.get('premium', False))
    res = 450 * premium_counter
    await message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {res} –†\n–° —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫: {res - errors * 5} –†\n–° —É—á–µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞: {res - errors * 5 - 1000} –†')


@admin_router.message(PremiumState.giving)
async def give_premium2(message: Message, state: FSMContext):
    uid, period = message.text.split()
    period = timedelta(days=int(period))
    await db.set_status(int(uid), True, period)
    await message.bot.send_message(chat_id=uid, text=f'*üîì –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ {period.days} –¥–Ω–µ–π!*', message_effect_id="5046509860389126442")
    await message.answer('–£—Å–ø–µ—à–Ω–æ.')
    await state.clear()


@admin_router.message(SendingState.enter_content)
async def enter_sending(message: Message, state: FSMContext):
    await state.clear()
    users = await db.get_all_users()
    c = 0
    async for i in users:
        try:
            await message.copy_to(i['user_id'])
            c += 1
        except:
            pass
    await message.answer(f'–£—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ({c})')


@admin_router.message(lambda x: x.text == '–õ–æ–≥–∏')
async def sending(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        file = FSInputFile('app.log', 'app.log')
        await message.answer_document(file)
    except:
        await message.answer('–õ–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç.')


@admin_router.message(lambda x: x.text == '–Æ–∑–µ—Ä—ã')
async def sending(message: Message):
    users_cursor = await db.get_all_users()
    premium = 0
    default = 0
    async for i in users_cursor:
        if i.get('premium') == True:
            premium += 1
        default += 1
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–≤—ã—Ö —é–∑–µ—Ä–æ–≤: {default}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–º–∏—É–º —é–∑–µ—Ä–æ–≤: {premium}')
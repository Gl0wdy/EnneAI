from g4f import AsyncClient

from ai.vector_db import VectorDb
from ai.utils import get_enneadata


AI_PROMT = '''
Ты - нейросеть "Клаудио Наранхо". Ты разбираешься в типологиях, но сейчас ТОЛЬКО в эннеаграмме.
Ты должен перепроверять себя и сверять ответ с БАЗОЙ ЗНАНИЙ и КРАТКОЙ ИНФОРМАЦИЕЙ.
Не нужно лишний раз шутить, если тебя об этом не просят. Прежде всего ты профессианальный типолог,
который определяет тип личности по эннеаграмме как своих собеседников, так и выдуманных персонажей.
Запомни следующее: 
1. сх перед типом (например, сх5) = сексуальная Е5
    со - социальная
    сп - самосохраняющаяся (консервативная)
    примеры: со7, со4, сх9, сп1 и так далее.
2. Ты используешь данные из базы знаний. Иногда цитируй ее, оговаривая, что взял информацию из книги,
    чтобы подтвердить значимость своих слов.
3. Перед тем, как типировать персонажа или человека, спроси себя о его личных, глубинных мотивах и сравни их
    с информацией из базы знаний. Сначала опирайся на БАЗУ ЗНАНИЙ, а уже потом прибегай к кратким сведениям если будет нужно.
4. Ты всегда типируешь по эннеаграмме С ПОДТИПОМ (либо СХ, либо СП, либо СО). Бери информацию о них в базе знаний.
5. Когда тебя спрашивают О ПОДТИПАХ, ТЫ ДОЛЖЕН ГОВОРИТЬ ОБ ИХ НЕВРОЗЕ, А НЕ ОБЩИХ ЧЕРТАХ ВСЕХ ОПРЕДЕЛЕННЫХ ПОДТИПОВ!
    КРАТКИЕ СВЕДЕНИЯ ОБ ЭТОМ ОПИСАНЫ У ТЕБЯ В КРАТКОЙ ИНФОРМАЦИИЕ, ИЩИ ТАМ.
6. Отвечай ТОЛЬКО на последний вопрос, но учитывай контекст текущей беседы, если будет нужно.
7. Сначала используй БАЗУ ЗНАНИЙ, но если там ничего не найдено, прибегай к КРАТКИМ СВЕДЕНИЯМ.
8. РАССМАТРИВАЙ КАК МОЖНО БОЛЬШЕ ВАРИАНТОВ ПРИ ТИПИРОВАНИИ И ПРИХОДИ К ОПРЕДЕЛЕННОМУ ВЫВОДУ ПОСРЕДСТВОМ ГЛУБОКОГО АНАЛИЗА.
    Сравнивай неврозы и мотивации эннеатипов и выбирай тот, что ближе. НЕ СУДИ ПОВЕРХНОСТНО!!
'''
AI_GROUP_PROMT = AI_PROMT + '''
8. ПРЯМО СЕЙЧАС ТЫ РАБОТАЕШЬ В ГРУППОВОМ ЧАТЕ. СООБЩЕНИЯ ОТ ПОЛЬЗОВАТЕЛЕЙ ВЫГЛЯДЯТ ТАК:
    @юзернейм: [контент]
    Учитывай, что сообщения могут поступать от разных пользователей.
'''
enneadata = get_enneadata()


class Chat:
    '''
    Класс для представления чата с пользователем.
    Соединяется с векторной БД.
    '''

    def __init__(self):
        self._client = AsyncClient()
        self.vector_db = VectorDb()

    async def create(self, request: str, collections: list | str, chat_history: list = [], is_group: bool = False) -> str:
        if isinstance(collections, str):
            data_chunks = await self.vector_db.search(request, collections)
        else:
            # @TODO
            data_chunks = []

        messages = [
            {'role': 'system', 'content': f'БАЗА ЗНАНИЙ N.{n}:\n{chunk}'}
            for n, chunk in enumerate(data_chunks, 1) 
        ] + enneadata + [
            {'role': 'system', 'content': AI_GROUP_PROMT if is_group else AI_PROMT}
        ] + chat_history

        response = await self._client.chat.completions.create(
            messages=messages,
            model='deepseek-v3',
        )
        if not response:
            return await self.create(request, collections, chat_history)
        return response.choices[0].message.content
        
    # @TODO
    async def deep_create(self, request: str, collections: list | str, depth: int = 2):
        pass